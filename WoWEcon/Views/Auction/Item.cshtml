@model WoWEcon.Models.AuctionItemVM

@{
    ViewBag.Title = @Model.ItemName;
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="row">
  <div class="col-md-8">
    <h1>@Model.ItemName <small>[@Model.Realm / @Model.Faction]</small></h1>
  </div>
</div>
<div class="row">
  <div class="col-md-8">
    <div id="crossSectionChart"></div>
  </div>
</div>
<div class="row">
  <div class="col-md-8">
    <div id="historicalChart"
  </div>
</div>

@section scripts {
@Scripts.Render("~\\Scripts\\highcharts.js")

@if (Model.Data.Primary.Count() != 0)
{
<script  type="text/javascript">
  $(function () {
    var chart,
        categories = [
          @{ Int64[] categories = Model.Data.Categories; }
          @for(int i = 0; i < categories.Length; ++i)
          {
            if(i != categories.Length -1)
            {
             @Html.Raw(
                String.Format("'{0} - {1}',",
                  categories[i].ToString(),
                  categories[i+1].ToString()
                )
              )
            }
            else
            {
             @Html.Raw(
               @String.Format("'{0}+'",
                 categories[i].ToString()
               )
             )
            }
          }
          @*String.Join(",", Model.PriceGroups.Select(a => a.ToString()).ToList())*@
        ];
    $(document).ready(function () {
      $('#crossSectionChart').highcharts({
        chart: {
          type: 'bar'
        },
        title: {
          text: 'Histogram of Price Groups'
        },
        subtitle: {
          text: 'Bill is Awesome'
        },
        xAxis: [{
          categories: categories,
          reversed: false
        }, { // mirror axis on right side
          opposite: true,
          reversed: false,
          categories: categories,
          linkedTo: 0
        }],
        yAxis: {
          title: {
            text: null
          },
          labels: {
            formatter: function () {
              return Math.abs(this.value);
            }
          },
          min: @Model.Data.Off.Select(z => z.Value*-1).Min() 
            ,
          max: @Model.Data.Primary.Select(z => z.Value).Max()
        },

        plotOptions: {
          series: {
            stacking: 'normal'
          }
        },

        tooltip: {
          formatter: function () {
            return '<b>' + this.series.name + ', Price Range ' + this.point.category + '</b><br/>' +
                'Count: ' + Highcharts.numberFormat(Math.abs(this.point.y), 0);
          }
        },

        series: [
          {
            name: "@Model.Data.PrimaryName",
            color: "@Model.Data.PrimaryColor",
            data: [
              @String.Join(",", Model.Data.Primary.Select(a => a.Value.ToString()).ToList())
            ]
          },
          {
            name: "@Model.Data.OffName",
            color: "@Model.Data.OffColor",
            data: [
              @String.Join(",", Model.Data.Off.Select(a => (a.Value * -1).ToString()).ToList())
            ]
          }
        ]
      });
    });

  });
</script>
}
else
{
  <script>
    $(function () {
      $('#crossSectionChart').text("Failed to find any results for primary faction")
    });
  </script>
}
<script type="text/javascript">
  $(function () {
    $('#historicalChart').highcharts({
      chart: {
        type: 'line'
      },
      title: {
        text: 'Historical Prices for @HttpUtility.JavaScriptStringEncode(Model.ItemName)'
      },
      subtitle: {
        text: 'Data taken infrequently, market based on 15th percentile'
      },
      xAxis: {
        type: 'datetime',
        dateTimeLabelFormats: { // don't display the dummy year
          month: '%e. %b',
          year: '%b'
        }
      },
      yAxis: {
        labels: {
          formatter: function() {
            return this.value / 10000 + 'g';
          }
        },
        title: {
          text: 'price'
        },
        min: 0
      },
      tooltip: {
        formatter: function() {
          return '<b>'+ this.series.name +'</b><br/>'+
          Highcharts.dateFormat('%e. %b', this.x) +': '+ this.y / 10000 +' g';
        }
      },
            
      series: [{
        name: 'Min Price',
        color: 'red',
        data: [
          @Html.Raw(Model.MinData())
        ]
      }, {
        name: 'Market Price',
        color: 'blue',
        data: [
          @Html.Raw(Model.MarketData())
        ]
      }]
    });
  });
</script>
}